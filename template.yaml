AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: serverless Lambda and ApiGatewayV2 Routes and integrations

Parameters:
  Environment:
    Type: String
    Default: prod

Resources:
  HttpApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/serverless/
      RetentionInDays: 14

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DisableExecuteApiEndpoint: false
      AccessLogSettings:
        DestinationArn: !GetAtt HttpApiLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "path": "$context.path", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength", "integrationError:"$context.integrationErrorMessage" }'
      CorsConfiguration:
        AllowMethods:
          - GET
          - OPTIONS
          - POST
          - PUT
          - DELETE
        AllowOrigins:
          - http://localhost:8080
        AllowHeaders:
          - "*"
        ExposeHeaders:
          - "Date, x-api-id"
        AllowCredentials: true

  ExpressLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Ref AWS::StackName
      PackageType: Zip
      Runtime: nodejs14.x
      Handler: src/serverless.handler
      MemorySize: 512
      Timeout: 30
      Tracing: Active
      Environment:
        Variables:
          NODE_ENV: !Sub ${Environment}
      Tags:
        Name: !Ref AWS::StackName
        Environment: !Ref Environment
    Metadata:
      SamResourceId: ExpressLambdaFunction

  LambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      Description: sample Lambda Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FunctionArn}/invocations
        - { FunctionArn: !GetAtt ExpressLambdaFunction.Arn }
      IntegrationMethod: POST
      PayloadFormatVersion: 2.0

  SampleRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - LambdaIntegration
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: ANY /sample
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref LambdaIntegration

  SampleProxyRoute:
    Type: AWS::ApiGatewayV2::Route
    DependsOn:
      - LambdaIntegration
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: ANY /sample/{proxy+}
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref LambdaIntegration

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ExpressLambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*

Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${ExpressLambdaFunction}

  SampleRouteConsoleUrl:
    Description: Console URL for classes route in ApiGatewayV2
    Value: !Sub
      - https://${AWS::Region}.console.aws.amazon.com/apigateway/main/develop/routes?api=${ApiGatewayId}&routes=${SampleRoute}
      - ApiGatewayId: !Ref HttpApi

  ApiUrl:
    Description: URL for the API Gateway.
    Value: !Sub
      - https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/
      - HttpApi: !Ref HttpApi
